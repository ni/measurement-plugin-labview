//---------------------------------------------------------------------
//---------------------------------------------------------------------
syntax = "proto3";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
package ni.measurementlink.discovery.v1;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
option csharp_namespace = "NationalInstruments.MeasurementLink.Discovery.V1";
option go_package = "discoveryv1";
option java_multiple_files = true;
option java_outer_classname = "DiscoveryServiceProto";
option java_package = "com.ni.measurementlink.discovery.v1";
option objc_class_prefix = "NIMD";
option php_namespace = "NI\\MeasurementLink\\Discovery\\V1";
option ruby_package = "NI::MeasurementLink::Discovery::V1";

// The service used as a registry for other services. This service can be used to discover
// and activate other services present in the system.
service DiscoveryService {
  // Registers a service instance with the discovery service.
  // Status Codes for errors:
  // - INVALID_ARGUMENT:
  //   - ServiceDescriptor.display_name is empty
  //   - ServiceDescriptor.provided_interfaces is empty
  //   - ServiceDescriptor.service_class is empty
  //   - ServiceLocation.location is empty
  //   - Both ServiceLocation.insecure_port and ServiceLocation.ssl_authenticated_port are empty
  //   - Either ServiceLocation.insecure_port or ServiceLocation.ssl_authenticated_port contain an invalid port number
  rpc RegisterService (RegisterServiceRequest) returns (RegisterServiceResponse);

  // Unregisters a service instance with the discovery service.
  rpc UnregisterService(UnregisterServiceRequest) returns (UnregisterServiceResponse);

  // Enumerate all services which implement a specific service interface.
  // This is useful for plugin type systems where the possible services are not known ahead of time.
  rpc EnumerateServices(EnumerateServicesRequest) returns (EnumerateServicesResponse);

  // Given a description of a service, returns information that can be used to establish communication
  // with that service. If necessary, the service will be started by the discovery service if it has not
  // already been started. Activation of the service is accomplished through use of a .serviceconfig file
  // which includes information describing the service. Services that register a .serviceconfig file must
  // call RegisterService when their service is started or this call will never complete successfully when
  // the discovery service attempts to start it.
  // Status Codes for errors:
  // - INVALID_ARGUMENT: provided_interfaces is empty
  // - NOT_FOUND: No service matching the resolve request was found
  // - FAILED_PRECONDITION: More than one service matching the resolve request was found
  rpc ResolveService(ResolveServiceRequest) returns (ServiceLocation);

  // Similar to ResolveService, returns information for the service in addition to the location of the service.
  // This is useful if you want to avoid the overhead of having to call EnumerateServices to get this information as part of
  // resolution of the service. See ResolveService for additional documentation related to resolving the service.
  rpc ResolveServiceWithInformation(ResolveServiceWithInformationRequest) returns (ResolveServiceWithInformationResponse);

  // Enumerate all compute nodes that have registered themselves in the current session.
  // These compute nodes are targets available for execution of services.
  // A compute node can be used as an argument to the ResolveService method to
  // get the service location for a service running on that compute node.
  rpc EnumerateComputeNodes(EnumerateComputeNodesRequest) returns (EnumerateComputeNodesResponse);
}

// Description of a registered service. This information can be used to display information to the user
// about the service when services are being developed for a plugin architecture
message ServiceDescriptor {
  // Required. The user visible name of the service.
  string display_name = 1;

  // Optional. Url which provides descriptive information about the service
  string description_url = 2;

  // Required. The service interfaces provided by the service. This is the gRPC Full Name of the service.
  // Registration can use the gRPC metadata to provide these names.
  repeated string provided_interfaces = 3;

  // Required. The "class" of a service. The value of this field should be unique for all services.
  // In effect, the .proto service declaration defines the interface, and this field defines a class or concrete type of the interface.
  string service_class = 4;

  // Optional. Represents a set of annotations on the service.
  // Well-known annotations:
  // - Description
  //   - Key: "ni/service.description"
  //   - Expected format: string
  //   - Example: "Measure inrush current with a shorted load and validate results against configured limits."
  // - Collection
  //   - Key: "ni/service.collection"
  //   - Expected format: "." delimited namespace/hierarchy case-insensitive string
  //   - Example: "CurrentTests.Inrush"
  // - Tags
  //   - Key: "ni/service.tags"
  //   - Expected format: serialized JSON string of an array of strings
  //   - Example: "[\"powerup\", \"current\"]"
  map<string, string> annotations = 5;

  // This field is used differently based on the message in which it is used.
  //
  // When used in a RegisterServiceRequest, this field must contain a single
  // version, and that version must follow the major.minor.patch format.
  // The version 0.0.1 is reserved for internal use, and cannot be specified.
  // If no version is specified, the version 0.0.1 will be used internally
  // for the registered service.
  //
  // When returned from EnumerateServicesResponse, this field will contain the
  // list of versions that are available for the associated service.
  //
  // When returned from ResolveServiceWithInformationResponse, this field will
  // contain the version of the resolved service.
  repeated string versions = 6;
}

// Represents the location of a service. The location generally includes the IP address and port number for the service
// which can be used to establish communication with the service.
message ServiceLocation {
  // Required: The location of the service. This is typically an IP address or DNS name.
  string location = 1;

  // The port to use when communicating with the service for insecure HTTP connections. At least one of insecure_port or
  // ssl_authenticated_port is required.
  string insecure_port = 2;

  // The port to use when communicating with the service for secure SSL authenticated connections. At least one of
  // insecure_port or ssl_authenticated_port is required.
  string ssl_authenticated_port = 3;
}

message RegisterServiceRequest {
  // Required. The description of the service.
  ServiceDescriptor service_description = 1;

  // Required. The canonical location information for the service.
  ServiceLocation location = 2;
}

message RegisterServiceResponse {
  // ID that can be used to unregister the service.
  string registration_id = 1;
}

message UnregisterServiceRequest {
  // Required. The registration ID of the service that should be unregistered.
  string registration_id = 1;
}

message UnregisterServiceResponse {
}

message EnumerateServicesRequest {
  // Optional. The gRPC full name of the service interface that is needed. If empty,
  // information for all services registered with the discovery service will be returned.
  string provided_interface = 1;

  // Optional. The "class" of the service that should be matched. Using this field can
  // be a useful way to determine the available versions of a specific service.  If used
  // in conjunction with the 'provided_interface' field, the 'service_class' field will
  // be used to filter the results to only those services that match the provided
  // interface and service class.
  string service_class = 2;
}

message EnumerateServicesResponse {
  // The list of available services which implement the specified service interface.
  repeated ServiceDescriptor available_services = 1;
  // Information about any unreachable resources. Each string in the list will be a
  // 'ServiceDescriptor.service_class' entry for each of the unreachable resources.
  // To get extended information about the unreachable resources, use ResolveService
  // and handle the resulting error.
  repeated string unreachable = 2;
}

message ResolveServiceRequest {
  // Required. This corresponds to the gRPC Full Name of the service and should match the information
  // that was supplied in the RegisterServiceRequest message.
  string provided_interface = 1;

  // Optional. The service "class" that should be matched. If the value of this field is not specified and there
  // is more than one matching service registered, an error is returned.
  string service_class = 2;

  // Optional. Indicates the deployment target from which the service should be resolved.
  // The value of this field can be obtained from the results of the EnumerateComputeNodes method.
  // If the value of this field is not specified, the service will be resolved from the
  // local deployment target.  If the service cannot be resolved from the specified deployment
  // target, an error is returned.
  string deployment_target = 3;

  // Optional. The version of the service to resolve. If not specified, the latest version will be resolved.
  string version = 4;
}

message ResolveServiceWithInformationRequest {
  // Required. This corresponds to the gRPC Full Name of the service and should match the information
  // that was supplied in the RegisterServiceRequest message.
  string provided_interface = 1;

  // Optional. The service "class" that should be matched. If the value of this field is not specified and there
  // is more than one matching service registered, an error is returned.
  string service_class = 2;

  // Optional. Indicates the deployment target from which the service should be resolved.
  // The value of this field can be obtained from the results of the EnumerateComputeNodes method.
  // If the value of this field is not specified, the service will be resolved from the
  // local deployment target.  If the service cannot be resolved from the specified deployment
  // target, an error is returned.
  string deployment_target = 3;

  // Optional. The version of the service to resolve. If not specified, the latest version will be resolved.
  string version = 4;
}

message ResolveServiceWithInformationResponse {
  // The canonical location information of the service.
  ServiceLocation service_location = 1;

  // The description of the service.
  ServiceDescriptor service_descriptor = 2;
}

// Represents a location capable resolving and running a service.
message ComputeNodeDescriptor {
  // The resolvable name of the compute node.
  string url = 1;
  // indicates whether the compute node is considered the local node.
  bool is_local = 2;
}

// Message sent to enumerate the compute nodes that have registered themselves in the current session.
message EnumerateComputeNodesRequest {
}

// Message returned from the EnumerateComputeNodes method.
message EnumerateComputeNodesResponse {
  // The list of compute nodes that have registered themselves in the current session.
  repeated ComputeNodeDescriptor compute_nodes = 1;
}