//---------------------------------------------------------------------
//---------------------------------------------------------------------
syntax = "proto3";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
package Measurement_v1; 

//---------------------------------------------------------------------
//---------------------------------------------------------------------
import "google/protobuf/any.proto";

// Service that contains methods related to measurement
service MeasurementService {
  
  // API to get complete metadata
  rpc GetMetadata (GetMetadataRequest) returns (GetMetadataResponse);
  
  // API to measure
  rpc Measure (MeasureRequest) returns (MeasureResponse);

  // Method to stop the measurement service
  rpc StopService (StopServiceRequest) returns (StopServiceResponse);
}

// Below message is the metadata request which is currently empty
// Can add any fields in future as required
message GetMetadataRequest{}

// Contains measurement details
// Other details can be added in future as required
message MeasurementDetails{
  // Measurement Display name for client to display to user
  string display_name = 1;

  // Measurement version that helps to maintain versions of a measurement in future
  string version = 2;

  // Represents category of measurement for the ProductType(example: AC or DC measurements)
  // Helps to provide better UI experience(example: filter using measurement_type)
  string measurement_type = 3;

  // Represents type of the DUT(example: ADC, LDO,...)
  // Helps to provide better UI experience(example: filter using product_type)
  string product_type = 4;
}

// Contains measurement parameters details
message MeasurementParameters{
  // Configuration Message's Packagename.MessageName
  // This is used by client to set Any Typeurl
  string configuration_parameters_messagetype = 1;

  // Measurement configuration parameters details
  // Helps client to form request with configurations for executing measurement
  repeated ConfigurationParameter configuration_parameters = 2;

  // Output Message's Packagename.MessageName.
  // This is used by client to set Any Typeurl
  string output_parameters_messagetype = 3;

  // Masurement output parameters details
  // Helps client to form request with configurations for executing measurement
  repeated OutputParameter output_parameters = 4;
}

// Contains measurement User Interface details - other details can be added in future as required
message UserInterfaceDetails{
  // Measurement configuration UI URL
  // Helps client to load UI URL for user interactions
  string configuration_ui_url = 1;
}

// Contains all metadata related to measurement(Basic, Parameter and UserInterface)
message GetMetadataResponse{
  // Measurement details
  MeasurementDetails measurement_details = 1;

  // Measurement Configurations and outputs details
  MeasurementParameters measurement_parameters = 2;
    
  // Measurement User Interface details
  UserInterfaceDetails user_interface_details = 3;
}

// measurement configuration info that is part of metadata
message ConfigurationParameter {
  // Represents order of parameter
  // Can be used during serialization and de-serialization
  int32 protobuf_id = 1;

  // Datatype of the parameter
  // Helps to de-serialize data into appropriate type
  DataType type = 2;
  
  // Represent if the data is an array and dimensions of the array
  int32 ArrayDimension = 3;

  // Parameter name
  // Helps to bind UI elements with configurations
  string name = 4;
  
  // Parent name
  // Helps to get the parent (incase of nested messages/clusters)
  string parent = 5;

  // Parameter default value
  // Helps to show default value in the UI for binded UI element 
  // oneof default_value {
  // bool boolean_value = 6;
  // double double_value = 7;
  // float float_value = 8;
  // int32 int32_value = 9;
  // int64 int64_value = 10;
  // string string_value = 11;
  // uint32 uint32_value = 12;
  // uint64 uint64_value = 13;
  // }
}

// measurement output info that is part of metadata
message OutputParameter {
  // Represents order of parameter
  // Can be used in future during de-serialization when parameter order is not same as metadata order
  int32 protobuf_id = 1;

  // Datatype of the parameter
  // Helps to de-serialize data into appropriate type
  DataType type = 2;
  
  // Represent if the data is an array and dimensions of the array
  int32 ArrayDimension = 3;

  // parameter name
  // Helps to bind UI elements with outputs
  string name = 4;

  // Parent name
  // Helps to get the parent (incase of nested messages/clusters)
  string parent = 5;
}

// supported datatypes - Can add other datatypes in future as required
enum DataType {
  DATA_TYPE_UNSPECIFIED = 0;
  DATA_TYPE_BOOL = 1;
  DATA_TYPE_DOUBLE = 2;
  DATA_TYPE_FLOAT = 3;
  DATA_TYPE_INT32 = 4;
  DATA_TYPE_INT64 = 5;
  DATA_TYPE_STRING = 6;
  DATA_TYPE_UINT32 = 7;
  DATA_TYPE_UINT64 = 8;
}

// message that holds measurement configurations at run time
message MeasureRequest{
  google.protobuf.Any configuration_arguments = 1;
}

// message that holds measurement outputs at run time
message MeasureResponse{
  google.protobuf.Any outputs = 1;
  ErrorInformation Error = 2;
}

// Stop Measurement service request - Can add fields in future as required
message StopServiceRequest{}

//Stop Measurement service response - Can add fields in future as required
message StopServiceResponse{}

// Represent the error details
message ErrorInformation{
	bool iserror = 1;
	int32 errorcode = 2;
	string errordetails = 3;
}